{"paragraphs":[{"title":"Union","text":"%pyspark\n\nfrom pyspark.sql import SparkSession\n\n\nsimpleData = [\n    (\"James\",\"Sales\",\"NY\",90000,34,10000), \n    (\"Michael\",\"Sales\",\"NY\",86000,56,20000), \n    (\"Robert\",\"Sales\",\"CA\",81000,30,23000), \n    (\"Maria\",\"Finance\",\"CA\",90000,24,23000) \n  ]\n\ncolumns= [\"employee_name\",\"department\",\"state\",\"salary\",\"age\",\"bonus\"]\ndf = spark.createDataFrame(data = simpleData, schema = columns)\ndf.printSchema()\ndf.show(truncate=False)\n\nsimpleData2 = [\n    (\"James\",\"Sales\",\"NY\",90000,34,10000), \n    (\"Maria\",\"Finance\",\"CA\",90000,24,23000), \n    (\"Jen\",\"Finance\",\"NY\",79000,53,15000), \n    (\"Jeff\",\"Marketing\",\"CA\",80000,25,18000), \n    (\"Kumar\",\"Marketing\",\"NY\",91000,50,21000) \n  ]\ncolumns2= [\"employee_name\", \"department\", \"state\", \"salary\", \"age\", \"bonus\"]\n\ndf2 = spark.createDataFrame(data=simpleData2, schema = columns2)\n\ndf2.printSchema()\ndf2.show(truncate=False)\n\nunionDF = df.union(df2)\nunionDF.show(truncate=False)\ndisDF = df.union(df2).distinct()\ndisDF.show(truncate=False)\n\nunionAllDF = df.unionAll(df2)\nunionAllDF.show(truncate=False)","user":"admin","dateUpdated":"2021-11-22T20:55:33+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- employee_name: string (nullable = true)\n |-- department: string (nullable = true)\n |-- state: string (nullable = true)\n |-- salary: long (nullable = true)\n |-- age: long (nullable = true)\n |-- bonus: long (nullable = true)\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n+-------------+----------+-----+------+---+-----+\n\nroot\n |-- employee_name: string (nullable = true)\n |-- department: string (nullable = true)\n |-- state: string (nullable = true)\n |-- salary: long (nullable = true)\n |-- age: long (nullable = true)\n |-- bonus: long (nullable = true)\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Jen          |Finance   |NY   |79000 |53 |15000|\n|Jeff         |Marketing |CA   |80000 |25 |18000|\n|Kumar        |Marketing |NY   |91000 |50 |21000|\n+-------------+----------+-----+------+---+-----+\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|James        |Sales     |NY   |90000 |34 |10000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Jen          |Finance   |NY   |79000 |53 |15000|\n|Jeff         |Marketing |CA   |80000 |25 |18000|\n|Kumar        |Marketing |NY   |91000 |50 |21000|\n+-------------+----------+-----+------+---+-----+\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Kumar        |Marketing |NY   |91000 |50 |21000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Jen          |Finance   |NY   |79000 |53 |15000|\n|Jeff         |Marketing |CA   |80000 |25 |18000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n+-------------+----------+-----+------+---+-----+\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|James        |Sales     |NY   |90000 |34 |10000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Jen          |Finance   |NY   |79000 |53 |15000|\n|Jeff         |Marketing |CA   |80000 |25 |18000|\n|Kumar        |Marketing |NY   |91000 |50 |21000|\n+-------------+----------+-----+------+---+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720221_1538902433","id":"20201205-075642_1790861291","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8261"},{"title":"Union. Различный порядок колонок","text":"%pyspark\nsimpleData3 = [\n    (\"Sales\",\"Jones\",\"NY\",90000,34,10000), \n    (\"Finance\",\"Maria\",\"CA\",90000,24,23000), \n    (\"Finance\",\"Jen\",\"NY\",79000,53,15000), \n  ]\ncolumns3= [\"department\", \"employee_name\",\"state\",\"salary\",\"age\",\"bonus\"]\n\ndf3 = spark.createDataFrame(data = simpleData3, schema = columns3)\n\nprint(\"df:\")\ndf.show()\nprint(\"df3:\")\ndf3.show()\n\nunionDF = df.union(df3)\nunionDF.show(truncate=False)","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df:\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|        James|     Sales|   NY| 90000| 34|10000|\n|      Michael|     Sales|   NY| 86000| 56|20000|\n|       Robert|     Sales|   CA| 81000| 30|23000|\n|        Maria|   Finance|   CA| 90000| 24|23000|\n+-------------+----------+-----+------+---+-----+\n\ndf3:\n+----------+-------------+-----+------+---+-----+\n|department|employee_name|state|salary|age|bonus|\n+----------+-------------+-----+------+---+-----+\n|     Sales|        Jones|   NY| 90000| 34|10000|\n|   Finance|        Maria|   CA| 90000| 24|23000|\n|   Finance|          Jen|   NY| 79000| 53|15000|\n+----------+-------------+-----+------+---+-----+\n\n+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Sales        |Jones     |NY   |90000 |34 |10000|\n|Finance      |Maria     |CA   |90000 |24 |23000|\n|Finance      |Jen       |NY   |79000 |53 |15000|\n+-------------+----------+-----+------+---+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720222_-758042192","id":"20201205-091434_1035149755","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8262"},{"title":"Safe union","text":"%pyspark\n\ndf.union(\n    df3.select(df.columns)\n).show(truncate=False)\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----------+-----+------+---+-----+\n|employee_name|department|state|salary|age|bonus|\n+-------------+----------+-----+------+---+-----+\n|James        |Sales     |NY   |90000 |34 |10000|\n|Michael      |Sales     |NY   |86000 |56 |20000|\n|Robert       |Sales     |CA   |81000 |30 |23000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Jones        |Sales     |NY   |90000 |34 |10000|\n|Maria        |Finance   |CA   |90000 |24 |23000|\n|Jen          |Finance   |NY   |79000 |53 |15000|\n+-------------+----------+-----+------+---+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720222_-575755376","id":"20201205-091932_1342555296","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8263"},{"title":"Regexp","text":"%pyspark\n\nfrom pyspark.sql.functions import regexp_replace, col\n\nhabrData\\\n.select(\"link\")\\\n.withColumn(\"company_id\", regexp_replace(col(\"link\"), \"(https://habr.com/ru/company/)|(/blog/[0-9]+/)|(https://habr.com/ru/post/[0-9]+/)\", \"\") )\\\n.show(50, False)\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------------------------------+-------------------+\n|link                                                        |company_id         |\n+------------------------------------------------------------+-------------------+\n|https://habr.com/ru/post/129837/                            |                   |\n|https://habr.com/ru/post/341756/                            |                   |\n|https://habr.com/ru/company/mobio/blog/341826/              |mobio              |\n|https://habr.com/ru/company/teamlab/blog/341522/            |teamlab            |\n|https://habr.com/ru/company/parallels/blog/341800/          |parallels          |\n|https://habr.com/ru/company/mailru/blog/341822/             |mailru             |\n|https://habr.com/ru/post/341744/                            |                   |\n|https://habr.com/ru/post/13895/                             |                   |\n|https://habr.com/ru/post/13880/                             |                   |\n|https://habr.com/ru/company/badoo/blog/473654/              |badoo              |\n|https://habr.com/ru/company/wrike/blog/475208/              |wrike              |\n|https://habr.com/ru/post/476786/                            |                   |\n|https://habr.com/ru/company/dodopizzadev/blog/476520/       |dodopizzadev       |\n|https://habr.com/ru/company/intel/blog/476514/              |intel              |\n|https://habr.com/ru/company/jugru/blog/476624/              |jugru              |\n|https://habr.com/ru/post/476756/                            |                   |\n|https://habr.com/ru/company/JetBrains/blog/476370/          |JetBrains          |\n|https://habr.com/ru/company/funcorp/blog/475968/            |funcorp            |\n|https://habr.com/ru/company/habr_career/blog/476712/        |habr_career        |\n|https://habr.com/ru/company/Voximplant/blog/476452/         |Voximplant         |\n|https://habr.com/ru/company/pult/blog/476718/               |pult               |\n|https://habr.com/ru/company/jetinfosystems/blog/476478/     |jetinfosystems     |\n|https://habr.com/ru/post/158811/                            |                   |\n|https://habr.com/ru/post/234051/                            |                   |\n|https://habr.com/ru/post/187316/                            |                   |\n|https://habr.com/ru/post/417167/                            |                   |\n|https://habr.com/ru/company/pvs-studio/blog/260755/         |pvs-studio         |\n|https://habr.com/ru/post/82885/                             |                   |\n|https://habr.com/ru/post/82864/                             |                   |\n|https://habr.com/ru/post/345158/                            |                   |\n|https://habr.com/ru/company/hflabs/blog/345012/             |hflabs             |\n|https://habr.com/ru/company/madrobots/blog/409191/          |madrobots          |\n|https://habr.com/ru/company/smartengines/blog/344774/       |smartengines       |\n|https://habr.com/ru/company/ruvds/blog/345164/              |ruvds              |\n|https://habr.com/ru/company/avito/blog/344990/              |avito              |\n|https://habr.com/ru/company/microsoft/blog/278501/          |microsoft          |\n|https://habr.com/ru/company/kingston_technology/blog/390955/|kingston_technology|\n|https://habr.com/ru/post/93631/                             |                   |\n|https://habr.com/ru/company/redmadrobot/blog/281555/        |redmadrobot        |\n|https://habr.com/ru/post/393021/                            |                   |\n|https://habr.com/ru/post/349338/                            |                   |\n|https://habr.com/ru/company/raiffeisenbank/blog/351926/     |raiffeisenbank     |\n|https://habr.com/ru/post/172259/                            |                   |\n|https://habr.com/ru/post/148271/                            |                   |\n|https://habr.com/ru/post/479126/                            |                   |\n|https://habr.com/ru/company/ozontech/blog/479140/           |ozontech           |\n|https://habr.com/ru/company/audiomania/blog/479170/         |audiomania         |\n|https://habr.com/ru/post/479144/                            |                   |\n|https://habr.com/ru/post/376365/                            |                   |\n|https://habr.com/ru/company/top3dshop/blog/376391/          |top3dshop          |\n+------------------------------------------------------------+-------------------+\nonly showing top 50 rows\n\n"}]},"apps":[],"jobName":"paragraph_1637592720223_-1816427531","id":"20201206-084730_1772413753","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8264"},{"text":"","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1637592720224_461810058","id":"20210416-105815_1653310209","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8265"},{"title":"Explode","text":"%pyspark\n\narrayArrayData = [\n  (\"James\",[[\"Java\",\"Scala\",\"C++\"],[\"Spark\",\"Java\"]]),\n  (\"Michael\",[[\"Spark\",\"Java\",\"C++\"],[\"Spark\",\"Java\"]]),\n  (\"Robert\",[[\"CSharp\",\"VB\"],[\"Spark\",\"Python\"]])\n]\n\ndf = spark.createDataFrame(data=arrayArrayData, schema = ['name','subjects'])\ndf.printSchema()\ndf.show(truncate=False)\n\nfrom pyspark.sql.functions import explode\ndf2 = df.select(df.name,explode(df.subjects).alias(\"exploded\"))\ndf2.show()\n\ndf2.select(df.name,explode(df2.exploded)).show(truncate=False)\n\ndf2.select(df.name,explode(df2.exploded)).printSchema()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- name: string (nullable = true)\n |-- subjects: array (nullable = true)\n |    |-- element: array (containsNull = true)\n |    |    |-- element: string (containsNull = true)\n\n+-------+-----------------------------------+\n|name   |subjects                           |\n+-------+-----------------------------------+\n|James  |[[Java, Scala, C++], [Spark, Java]]|\n|Michael|[[Spark, Java, C++], [Spark, Java]]|\n|Robert |[[CSharp, VB], [Spark, Python]]    |\n+-------+-----------------------------------+\n\n+-------+------------------+\n|   name|          exploded|\n+-------+------------------+\n|  James|[Java, Scala, C++]|\n|  James|     [Spark, Java]|\n|Michael|[Spark, Java, C++]|\n|Michael|     [Spark, Java]|\n| Robert|      [CSharp, VB]|\n| Robert|   [Spark, Python]|\n+-------+------------------+\n\n+-------+------+\n|name   |col   |\n+-------+------+\n|James  |Java  |\n|James  |Scala |\n|James  |C++   |\n|James  |Spark |\n|James  |Java  |\n|Michael|Spark |\n|Michael|Java  |\n|Michael|C++   |\n|Michael|Spark |\n|Michael|Java  |\n|Robert |CSharp|\n|Robert |VB    |\n|Robert |Spark |\n|Robert |Python|\n+-------+------+\n\nroot\n |-- name: string (nullable = true)\n |-- col: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1637592720225_1225033960","id":"20201205-093329_1785908816","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8266"},{"text":"%pyspark\ndf.schema.json()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'{\"fields\":[{\"metadata\":{},\"name\":\"name\",\"nullable\":true,\"type\":\"string\"},{\"metadata\":{},\"name\":\"subjects\",\"nullable\":true,\"type\":{\"containsNull\":true,\"elementType\":{\"containsNull\":true,\"elementType\":\"string\",\"type\":\"array\"},\"type\":\"array\"}}],\"type\":\"struct\"}'\n"}]},"apps":[],"jobName":"paragraph_1637592720226_1671579323","id":"20201224-183557_388684062","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8267"},{"title":"Map to columns","text":"%pyspark\n\narrayData = [\n        ('James',['Java','Scala'],{'hair':'black','eye':'brown'}),\n        ('Michael',['Spark','Java',None],{'hair':'brown','eye':None}),\n        ('Robert',['CSharp',''],{'hair':'red','eye':''}),\n        ('Washington',None,None),\n        ('Jefferson',['1','2'],{})\n        ]\n\ndf = spark.createDataFrame(data=arrayData, schema = ['name', 'knownLanguages', 'properties'])\ndf.printSchema()\ndf.show(truncate=False)\n\nfrom pyspark.sql.functions import explode\ndf3 = df.select(df.name,explode(df.properties))\ndf3.printSchema()\ndf3.show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- name: string (nullable = true)\n |-- knownLanguages: array (nullable = true)\n |    |-- element: string (containsNull = true)\n |-- properties: map (nullable = true)\n |    |-- key: string\n |    |-- value: string (valueContainsNull = true)\n\n+----------+--------------+-----------------------------+\n|name      |knownLanguages|properties                   |\n+----------+--------------+-----------------------------+\n|James     |[Java, Scala] |[eye -> brown, hair -> black]|\n|Michael   |[Spark, Java,]|[eye ->, hair -> brown]      |\n|Robert    |[CSharp, ]    |[eye -> , hair -> red]       |\n|Washington|null          |null                         |\n|Jefferson |[1, 2]        |[]                           |\n+----------+--------------+-----------------------------+\n\nroot\n |-- name: string (nullable = true)\n |-- key: string (nullable = false)\n |-- value: string (nullable = true)\n\n+-------+----+-----+\n|   name| key|value|\n+-------+----+-----+\n|  James| eye|brown|\n|  James|hair|black|\n|Michael| eye| null|\n|Michael|hair|brown|\n| Robert| eye|     |\n| Robert|hair|  red|\n+-------+----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720227_-133697889","id":"20201205-094209_1444876500","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8268"},{"title":"explode_outer","text":"%pyspark\nfrom pyspark.sql.functions import explode_outer\n\"\"\" with array \"\"\"\ndf.select(df.name,explode_outer(df.knownLanguages)).show()\n\"\"\" with map \"\"\"\ndf.select(df.name,explode_outer(df.properties)).show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+------+\n|      name|   col|\n+----------+------+\n|     James|  Java|\n|     James| Scala|\n|   Michael| Spark|\n|   Michael|  Java|\n|   Michael|  null|\n|    Robert|CSharp|\n|    Robert|      |\n|Washington|  null|\n| Jefferson|     1|\n| Jefferson|     2|\n+----------+------+\n\n+----------+----+-----+\n|      name| key|value|\n+----------+----+-----+\n|     James| eye|brown|\n|     James|hair|black|\n|   Michael| eye| null|\n|   Michael|hair|brown|\n|    Robert| eye|     |\n|    Robert|hair|  red|\n|Washington|null| null|\n| Jefferson|null| null|\n+----------+----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720228_785667275","id":"20201205-095256_33527163","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8269"},{"text":"%md\n#Window functions","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#Window functions</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1637592720228_-477868890","id":"20201205-095632_1310513563","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8270"},{"title":"Create df for window examples","text":"%pyspark\n\nsimpleData = ((\"James\", \"Sales\", 3000), \n    (\"Michael\", \"Sales\", 4600),  \n    (\"Robert\", \"Sales\", 4100),   \n    (\"Maria\", \"Finance\", 3000),  \n    (\"James\", \"Sales\", 3000),    \n    (\"Scott\", \"Finance\", 3300),  \n    (\"Jen\", \"Finance\", 3900),    \n    (\"Jeff\", \"Marketing\", 3000), \n    (\"Kumar\", \"Marketing\", 2000),\n    (\"Saif\", \"Sales\", 4100) \n  )\n \ncolumns= [\"employee_name\", \"department\", \"salary\"]\ndf = spark.createDataFrame(data = simpleData, schema = columns)\ndf.printSchema()\ndf.show(truncate=False)","user":"admin","dateUpdated":"2021-11-22T19:25:50+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- employee_name: string (nullable = true)\n |-- department: string (nullable = true)\n |-- salary: long (nullable = true)\n\n+-------------+----------+------+\n|employee_name|department|salary|\n+-------------+----------+------+\n|James        |Sales     |3000  |\n|Michael      |Sales     |4600  |\n|Robert       |Sales     |4100  |\n|Maria        |Finance   |3000  |\n|James        |Sales     |3000  |\n|Scott        |Finance   |3300  |\n|Jen          |Finance   |3900  |\n|Jeff         |Marketing |3000  |\n|Kumar        |Marketing |2000  |\n|Saif         |Sales     |4100  |\n+-------------+----------+------+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720229_1220109984","id":"20201205-095256_631445372","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:25:50+0300","dateFinished":"2021-11-22T19:26:25+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8271"},{"text":"%pyspark\n\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import row_number, rank, dense_rank, percent_rank, ntile, cume_dist, round\nfrom pyspark.sql.types import FloatType\n\nwindowSpec  = Window.partitionBy().orderBy(\"salary\")\n\ndf\\\n.withColumn(\"row_number\", row_number().over(windowSpec)) \\\n.show(truncate=False)\n","user":"admin","dateUpdated":"2021-11-22T19:27:01+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----------+------+----------+\n|employee_name|department|salary|row_number|\n+-------------+----------+------+----------+\n|Kumar        |Marketing |2000  |1         |\n|James        |Sales     |3000  |2         |\n|Maria        |Finance   |3000  |3         |\n|James        |Sales     |3000  |4         |\n|Jeff         |Marketing |3000  |5         |\n|Scott        |Finance   |3300  |6         |\n|Jen          |Finance   |3900  |7         |\n|Robert       |Sales     |4100  |8         |\n|Saif         |Sales     |4100  |9         |\n|Michael      |Sales     |4600  |10        |\n+-------------+----------+------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720230_1134059016","id":"20210913-163628_1826725823","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:26:32+0300","dateFinished":"2021-11-22T19:26:33+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8272"},{"title":"row_number, rank","text":"%pyspark\n\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import row_number, rank, dense_rank, percent_rank, ntile, cume_dist, round\nfrom pyspark.sql.types import FloatType\n\nwindowSpec  = Window.partitionBy(\"department\").orderBy(\"salary\")\n\ndf\\\n.withColumn(\"row_number\", row_number().over(windowSpec)) \\\n.withColumn(\"rank\", rank().over(windowSpec)) \\\n.withColumn(\"dense_rank\", dense_rank().over(windowSpec)) \\\n.withColumn(\"percent_rank\", percent_rank().over(windowSpec)) \\\n.withColumn(\"ntile\", ntile(3).over(windowSpec)) \\\n.withColumn(\"cume_dist\", round(cume_dist().over(windowSpec), 2 )) \\\n.show(truncate=False)\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----------+------+----------+----+----------+------------+-----+---------+\n|employee_name|department|salary|row_number|rank|dense_rank|percent_rank|ntile|cume_dist|\n+-------------+----------+------+----------+----+----------+------------+-----+---------+\n|James        |Sales     |3000  |1         |1   |1         |0.0         |1    |0.4      |\n|James        |Sales     |3000  |2         |1   |1         |0.0         |1    |0.4      |\n|Robert       |Sales     |4100  |3         |3   |2         |0.5         |2    |0.8      |\n|Saif         |Sales     |4100  |4         |3   |2         |0.5         |2    |0.8      |\n|Michael      |Sales     |4600  |5         |5   |3         |1.0         |3    |1.0      |\n|Maria        |Finance   |3000  |1         |1   |1         |0.0         |1    |0.33     |\n|Scott        |Finance   |3300  |2         |2   |2         |0.5         |2    |0.67     |\n|Jen          |Finance   |3900  |3         |3   |3         |1.0         |3    |1.0      |\n|Kumar        |Marketing |2000  |1         |1   |1         |0.0         |1    |0.5      |\n|Jeff         |Marketing |3000  |2         |2   |2         |1.0         |2    |1.0      |\n+-------------+----------+------+----------+----+----------+------------+-----+---------+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720230_-6162189","id":"20201205-095255_1923981273","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8273"},{"title":"lag Window Function","text":"%pyspark\nfrom pyspark.sql.functions import lag, lead\n\ndf.withColumn(\"lag\", lag(\"salary\", 1).over(windowSpec)) \\\n.withColumn(\"lead\", lead(\"salary\", 2).over(windowSpec)) \\\n.show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----------+------+----+----+\n|employee_name|department|salary| lag|lead|\n+-------------+----------+------+----+----+\n|        James|     Sales|  3000|null|4100|\n|        James|     Sales|  3000|3000|4100|\n|       Robert|     Sales|  4100|3000|4600|\n|         Saif|     Sales|  4100|4100|null|\n|      Michael|     Sales|  4600|4100|null|\n|        Maria|   Finance|  3000|null|3900|\n|        Scott|   Finance|  3300|3000|null|\n|          Jen|   Finance|  3900|3300|null|\n|        Kumar| Marketing|  2000|null|null|\n|         Jeff| Marketing|  3000|2000|null|\n+-------------+----------+------+----+----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720231_-808081235","id":"20201205-095255_951806387","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8274"},{"title":"Window Aggregate Functions","text":"%pyspark\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.types import FloatType\nfrom pyspark.sql.functions import col,avg,sum,min,max,row_number\n\nwindowSpec     = Window.partitionBy(\"department\").orderBy(\"salary\")\nwindowSpecAgg  = Window.partitionBy(\"department\")\n\n\ndf.withColumn(\"row\", row_number().over(windowSpec)) \\\n.withColumn(\"avg_cum\", avg(col(\"salary\")).over(windowSpec)) \\\n.withColumn(\"avg\", avg(col(\"salary\")).over(windowSpecAgg)) \\\n.withColumn(\"sum_cum\", sum(col(\"salary\")).over(windowSpec)) \\\n.withColumn(\"sum\", sum(col(\"salary\")).over(windowSpecAgg)) \\\n.withColumn(\"min\", min(col(\"salary\")).over(windowSpecAgg)) \\\n.withColumn(\"max\", max(col(\"salary\")).over(windowSpecAgg)) \\\n.show()\n# .where(col(\"row\") == 1).select(\"department\", \"avg\", \"sum\", \"min\", \"max\") \\\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----------+------+---+-------+------+-------+-----+----+----+\n|employee_name|department|salary|row|avg_cum|   avg|sum_cum|  sum| min| max|\n+-------------+----------+------+---+-------+------+-------+-----+----+----+\n|        James|     Sales|  3000|  1| 3000.0|3760.0|   6000|18800|3000|4600|\n|        James|     Sales|  3000|  2| 3000.0|3760.0|   6000|18800|3000|4600|\n|       Robert|     Sales|  4100|  3| 3550.0|3760.0|  14200|18800|3000|4600|\n|         Saif|     Sales|  4100|  4| 3550.0|3760.0|  14200|18800|3000|4600|\n|      Michael|     Sales|  4600|  5| 3760.0|3760.0|  18800|18800|3000|4600|\n|        Maria|   Finance|  3000|  1| 3000.0|3400.0|   3000|10200|3000|3900|\n|        Scott|   Finance|  3300|  2| 3150.0|3400.0|   6300|10200|3000|3900|\n|          Jen|   Finance|  3900|  3| 3400.0|3400.0|  10200|10200|3000|3900|\n|        Kumar| Marketing|  2000|  1| 2000.0|2500.0|   2000| 5000|2000|3000|\n|         Jeff| Marketing|  3000|  2| 2500.0|2500.0|   5000| 5000|2000|3000|\n+-------------+----------+------+---+-------+------+-------+-----+----+----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720232_-1333874372","id":"20201205-095254_1709985469","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8275"},{"text":"%pyspark\n\nspark.sql(\"with () as a, select * from \")","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1637592720232_-1537198023","id":"20201224-163339_22616877","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8276"},{"title":"UDF","text":"%pyspark\n\nhabrData = spark.read.option(\"header\", True).csv(\"/datasets/habr_data.csv\")\n \nfrom pyspark.sql.functions import udf, col, round\nfrom pyspark.sql.types import IntegerType, FloatType\nimport pyspark.sql.functions as F\n\ndef mult(i):\n    return i * 2\n\nmultUdf = udf(mult)\n\nhabrData \\\n.select(\"rating\") \\\n.limit(10) \\\n.withColumn(\"udfString\", multUdf(col(\"rating\"))) \\\n.withColumn(\"udfInt\", multUdf(col(\"rating\").cast(IntegerType()))) \\\n.withColumn(\"round\", round(col(\"udfInt\")) ) \\\n.show()","user":"admin","dateUpdated":"2021-11-22T19:42:13+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+---------+------+-----+\n|rating|udfString|udfInt|round|\n+------+---------+------+-----+\n|    54|     5454|   108|108.0|\n|    17|     1717|    34| 34.0|\n|    13|     1313|    26| 26.0|\n|    20|     2020|    40| 40.0|\n|    22|     2222|    44| 44.0|\n|    35|     3535|    70| 70.0|\n|     5|       55|    10| 10.0|\n|    54|     5454|   108|108.0|\n|     5|       55|    10| 10.0|\n|    76|     7676|   152|152.0|\n+------+---------+------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720233_-743775761","id":"20201205-072041_731936085","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8277"},{"text":"%pyspark\n\nspark.createDataFrame(([1], [2], [3]), schema=\"n INT\").show()","user":"admin","dateUpdated":"2021-11-22T19:52:34+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+\n|  n|\n+---+\n|  1|\n|  2|\n|  3|\n+---+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720234_650752037","id":"20201206-094150_1919422905","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:52:34+0300","dateFinished":"2021-11-22T19:52:35+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8278"},{"text":"%pyspark\n\nspark.createDataFrame(([1], [2], [3]), schema=\"n INT\") \\\n.selectExpr(\"n + 1\") \\\n.explain()\n","user":"admin","dateUpdated":"2021-11-22T19:52:36+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [(n#64 + 1) AS (n + 1)#66]\n+- Scan ExistingRDD[n#64]\n"}]},"apps":[],"jobName":"paragraph_1637592720234_-1606997005","id":"20201205-102118_150497784","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:52:36+0300","dateFinished":"2021-11-22T19:52:37+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8279"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import udf, col\n\ndef plusOne(i):\n    return i + 1\n    \nplusOneUdf = udf(plusOne)\n\nspark.createDataFrame(([1], [2], [3]), schema=\"n INT\")\\\n.select(plusOneUdf(col(\"n\")).alias(\"plusOneUdf\"))\\\n.explain()","user":"admin","dateUpdated":"2021-11-22T19:53:03+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [pythonUDF0#72 AS plusOneUdf#70]\n+- BatchEvalPython [plusOne(n#68)], [n#68, pythonUDF0#72]\n   +- Scan ExistingRDD[n#68]\n"}]},"apps":[],"jobName":"paragraph_1637592720235_-134896766","id":"20201205-102545_408675623","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:53:03+0300","dateFinished":"2021-11-22T19:53:03+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8280"},{"text":"%pyspark\n\nspark.createDataFrame(([1], [2], [3]), schema=\"n INT\")\\\n.selectExpr(\"n + 1 as plusOne\")\\\n.where(\"plusOne = 2\")\\\n.explain()","user":"admin","dateUpdated":"2021-11-22T19:53:53+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(1) Project [(n#73 + 1) AS plusOne#75]\n+- *(1) Filter (isnotnull(n#73) && ((n#73 + 1) = 2))\n   +- Scan ExistingRDD[n#73]\n"}]},"apps":[],"jobName":"paragraph_1637592720236_833341419","id":"20201205-102734_1826966533","dateCreated":"2021-11-22T17:52:00+0300","dateStarted":"2021-11-22T19:53:54+0300","dateFinished":"2021-11-22T19:53:54+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8281"},{"text":"%pyspark\n\nspark.createDataFrame(([1], [2], [3]), schema=\"n INT\")\\\n.withColumn(\"plusOne\", plusOneUdf(col(\"n\")))\\\n.where(\"plusOne = 2\")\\\n.explain()\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Physical Plan ==\n*(2) Project [n#957, pythonUDF0#964 AS plusOne#959]\n+- BatchEvalPython [plusOne(n#957)], [n#957, pythonUDF0#964]\n   +- *(1) Project [n#957]\n      +- *(1) Filter (cast(pythonUDF0#963 as int) = 2)\n         +- BatchEvalPython [plusOne(n#957)], [n#957, pythonUDF0#963]\n            +- Scan ExistingRDD[n#957]\n"}]},"apps":[],"jobName":"paragraph_1637592720236_-1845583181","id":"20201205-102826_2145297130","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8282"},{"title":"Обработка null","text":"%pyspark\n\nhabrData = spark.read.option(\"header\", True).csv(\"/datasets/habr_data.csv\").cache()\n \nfrom pyspark.sql.functions import udf, col, when, expr\nfrom pyspark.sql.types import IntegerType\n\ndef mult(i):\n    return i * 2\n    \ndef mult_nullsafe(i):\n    if i is None:\n        return 0\n    else:\n        return i * 2\n    \n# multUdf = udf(mult) \nmultUdf = udf(mult_nullsafe)\n\n# .na.drop(\"all\")\\\nhabrData\\\n.select(\"rating\")\\\n.withColumn(\"rating\", col(\"rating\").cast(IntegerType()))\\\n.withColumn(\"udfInt\", multUdf(col(\"rating\"))   )\\\n.show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+------+\n|rating|udfInt|\n+------+------+\n|    54|   108|\n|    17|    34|\n|    13|    26|\n|    20|    40|\n|    22|    44|\n|    35|    70|\n|     5|    10|\n|    54|   108|\n|     5|    10|\n|    76|   152|\n|    54|   108|\n|     5|    10|\n|    13|    26|\n|    10|    20|\n|    21|    42|\n|    15|    30|\n|    14|    28|\n|    37|    74|\n|    22|    44|\n|    24|    48|\n+------+------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1637592720237_-1127595203","id":"20201205-072131_972431071","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8283"},{"title":"SQL register UDF","text":"%pyspark\n\nfrom pyspark.sql.functions import udf, col\n\n\nspark.udf.register(\"mult_nullsafe\", mult_nullsafe)\n\nhabrData \\\n.where(\"rating is not null\") \\\n.withColumn(\"rating\", col(\"rating\").cast(IntegerType())) \\\n.createOrReplaceTempView(\"habr_data\")\n\nspark.sql(\"select rating, mult_nullsafe(rating) plus_one from habr_data\").show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------+\n|rating|plus_one|\n+------+--------+\n|    54|     108|\n|    17|      34|\n|    13|      26|\n|    20|      40|\n|    22|      44|\n|    35|      70|\n|     5|      10|\n|    54|     108|\n|     5|      10|\n|    76|     152|\n|    54|     108|\n|     5|      10|\n|    13|      26|\n|    10|      20|\n|    21|      42|\n|    15|      30|\n|    14|      28|\n|    37|      74|\n|    22|      44|\n|    24|      48|\n+------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1637592720251_-261749621","id":"20201126-155859_908105659","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8284"},{"title":"Lambda","text":"%pyspark\n\n# Integer type output\nfrom pyspark.sql.types import IntegerType\n\ndef square(i):\n    if i is None:\n        return 0\n    else:\n        return i * i\n    \nsquare_udf_int = udf(lambda z: square(z), IntegerType())\n\nhabrData\\\n.select(\"rating\")\\\n.where(\"rating is not null\")\\\n.withColumn(\"rating\", col(\"rating\").cast(IntegerType()))\\\n.withColumn(\"square\", square_udf_int(col(\"rating\"))   )\\\n.show()","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+------+\n|rating|square|\n+------+------+\n|    54|  2916|\n|    17|   289|\n|    13|   169|\n|    20|   400|\n|    22|   484|\n|    35|  1225|\n|     5|    25|\n|    54|  2916|\n|     5|    25|\n|    76|  5776|\n|    54|  2916|\n|     5|    25|\n|    13|   169|\n|    10|   100|\n|    21|   441|\n|    15|   225|\n|    14|   196|\n|    37|  1369|\n|    22|   484|\n|    24|   576|\n+------+------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1637592720251_-1485178135","id":"20201205-073905_1094318395","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8285"},{"title":"Обработка массивов","text":"%pyspark\nfrom pyspark.sql.types import *\n\ndef square_list_float(x):\n    return [float(val)**2 for val in x]\n\n\nsquare_list_float_udf = udf(lambda y: square_list_float(y), ArrayType(FloatType()))\n\n\ncSchema = StructType([StructField(\"int_array\", ArrayType(IntegerType()))])\n\ndf = spark.createDataFrame(\n    [[[1, 2]], [[3, 4, 5]], [[6, 7, 8, 9]]], schema=cSchema\n)\n\ndf.printSchema()\ndf.show()\n\ndf\\\n.withColumn(\"square_list_float_udf\", square_list_float_udf(\"int_array\"))\\\n.show()\n","user":"admin","dateUpdated":"2021-11-22T17:52:00+0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- int_array: array (nullable = true)\n |    |-- element: integer (containsNull = true)\n\n+------------+\n|   int_array|\n+------------+\n|      [1, 2]|\n|   [3, 4, 5]|\n|[6, 7, 8, 9]|\n+------------+\n\n+------------+---------------------+\n|   int_array|square_list_float_udf|\n+------------+---------------------+\n|      [1, 2]|           [1.0, 4.0]|\n|   [3, 4, 5]|    [9.0, 16.0, 25.0]|\n|[6, 7, 8, 9]| [36.0, 49.0, 64.0...|\n+------------+---------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1637592720252_480060742","id":"20201205-074223_1488338702","dateCreated":"2021-11-22T17:52:00+0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8286"},{"text":"%pyspark\nprint(\"https://arena-hadoop.inno.tech:18088/proxy/\" + sc.applicationId)","user":"admin","dateUpdated":"2021-11-22T20:18:58+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"https://arena-hadoop.inno.tech:18088/proxy/application_1637409254228_0155\n"}]},"apps":[],"jobName":"paragraph_1637601204073_-1533162719","id":"20211122-201324_349585100","dateCreated":"2021-11-22T20:13:24+0300","dateStarted":"2021-11-22T20:18:58+0300","dateFinished":"2021-11-22T20:18:58+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8287"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2021-11-22T20:13:21+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1637601201900_999813636","id":"20211122-201321_761857107","dateCreated":"2021-11-22T20:13:21+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:8288"}],"name":"it_3/3 lecture","id":"2GQMDMX91","noteParams":{},"noteForms":{},"angularObjects":{"sparkLocal:shared_process":[],"md:shared_process":[],"spark::2GQMDMX91":[],"sh:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}